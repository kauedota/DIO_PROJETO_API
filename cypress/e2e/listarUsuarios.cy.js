/// <reference types="cypress" />

const baseUrl = 'http://localhost:3000/usuarios';

describe('Listar usu치rios cadastrados', () => {

    // 游댫 1. Listar todos os usu치rios cadastrados
    // Espera-se status 200 e ao menos um usu치rio com campos preenchidos
    it('Listar usu치rios cadastrados - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: baseUrl,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.be.greaterThan(0);
            expect(response.body.usuarios[0].nome).to.exist;
            expect(response.body.usuarios[0].email).to.exist;
            expect(response.body.usuarios[0].password).to.exist;
            expect(response.body.usuarios[0].administrador).to.exist;
            expect(response.body.usuarios[0]._id).to.exist;
        });
    });

    // 游댫 2. Listar usu치rio por ID v치lido
    // Espera retorno de um 칰nico usu치rio espec칤fico
    it('Listar usu치rio por ID - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?_id=0uxuPY0cbmQhpEz1`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.eq(1);
            expect(response.body.usuarios[0].nome).to.eq('Fulano da Silva');
            expect(response.body.usuarios[0].email).to.eq('fulano@qa.com');
            expect(response.body.usuarios[0].password).to.eq('teste');
            expect(response.body.usuarios[0].administrador).to.eq('true');
        });
    });

    // 游댫 3. Buscar usu치rio por ID inexistente
    // Espera erro 400 com mensagem apropriada
    it('Buscar usu치rio por ID inexistente - FALHA', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}/0uxuPY0cbmQhpEz5`,
            headers: { 'Accept-Language': 'en-us' },
            failOnStatusCode: false
        }).then((response) => {
            expect(response.status).to.eq(400);
            expect(response.body.message).to.eq('Usu치rio n칚o encontrado');
        });
    });

    // 游댫 4. Buscar usu치rio por nome completo (v치lido)
    it('Buscar usu치rio por nome - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?nome=Fulano%20da%20Silva`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.eq(1);
            expect(response.body.usuarios[0].nome).to.eq('Fulano da Silva');
        });
    });

    // 游댫 5. Buscar usu치rio por nome inexistente
    // Espera retorno com quantidade 0, sem erro
    it('Buscar usu치rio por nome inexistente - FALHA', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?nome=Fulanoo%20da%20Silva`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.eq(0);
        });
    });

    // 游댫 6. Buscar usu치rio por e-mail v치lido
    it('Buscar usu치rio por e-mail - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?email=fulano@qa.com`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.eq(1);
            expect(response.body.usuarios[0].email).to.eq('fulano@qa.com');
        });
    });

    // 游댫 7. Buscar usu치rio por e-mail inv치lido
    // Espera erro de valida칞칚o (400)
    it('Buscar usu치rio por e-mail inv치lido - FALHA', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?email=heudis9d`, // E-mail malformado
            headers: { 'Accept-Language': 'en-us' },
            failOnStatusCode: false
        }).then((response) => {
            expect(response.status).to.eq(400);
            expect(response.body.email).to.eq('email deve ser um email v치lido');
        });
    });

    // 游댫 8. Buscar usu치rios administradores
    // Espera retornar todos os usu치rios com campo administrador=true
    it('Buscar usu치rios administradores - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?administrador=true`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.be.greaterThan(0);
            response.body.usuarios.forEach(usuario => {
                expect(usuario.administrador).to.eq('true');
            });
        });
    });

    // 游댫 9. Buscar usu치rios por senha
    // Apenas para testar o campo diretamente no filtro (n칚o comum em APIs reais)
    it('Buscar usu치rios por senha - SUCESSO', () => {
        cy.api({
            method: 'GET',
            url: `${baseUrl}?password=teste`,
            headers: { 'Accept-Language': 'en-us' }
        }).then((response) => {
            expect(response.status).to.eq(200);
            expect(response.body.quantidade).to.be.greaterThan(0);
            response.body.usuarios.forEach(usuario => {
                expect(usuario.password).to.eq('teste');
            });
        });
    });

});